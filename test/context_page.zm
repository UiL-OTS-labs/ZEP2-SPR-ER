/******************************************************************************\
FILE:           std_text_page.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Provides a page object for timed presentation of plain text messages.

HISTORY:
2017-01-01 TV   Initial version for Zep 2.0

\******************************************************************************/

import defs;

Page text_page
{
    bool        checkkeys;      // if set, continue keys enabled


    init()
    {
        fill_pattern_color = TEXT_PAGE_COLOR;
    }


    on_event:key_press()
    {
        if (target != null && checkkeys &&
                (input_key == KEY_Return || input_key == ' '))
            done(CONTINUE);
        else
            handle_special_key(this, input_key, input_modifiers);
    }


    on_event:message()
    {
        // Handle 'continue' message received from control page.
        if (message_arg == CONTINUE)
            done(CONTINUE);
    }


    VerticalLayout layout
    {
        LabelGadget message
        {
            init()
            {
                font_family = TEXT_PAGE_MESSAGE_FONT_FAMILY;
                font_size = CONTEXT_FONT_SIZE;
                fill_pattern_color = TEST_PAGE_STIMULUS_COLOR;
                text_color = TEXT_PAGE_MESSAGE_TEXT_COLOR;
                hor_alignment = ALIGN_BEGIN;
//                ver_alignment = ALIGN_CENTER;
                is_wrapping = true;
                size = 800, 200;
                margin = 20;
            }
        }
    }


    Timer timer
    {
        on_event:expire()
        {
            done(TIMEOUT);
        }
    }


    void done(int msgid)
    {
        timer.abort();

        checkkeys = false;

        signal_target(msgid);   // Tell caller we're done.
        target = null;

        // println("C");
        // if (control.target == this)
        // {
        //     println("D");
        //     control.disable_keys();
        //     control.target = null;
        // }
    }


    //==========================================================================


    void set_text(string txt, bool markup=false)
    {
        if (markup) layout.message.fancy_text = txt;
        else layout.message.text = txt;
    }


    void set_text_size(int width, int height)
    {
        layout.message.size = width, height;
    }


    void action_auto(dur timeout=0s,
        dur showdelay=-1s, dur fadedur=-1s)
    {
        action(null, timeout, showdelay, fadedur, false);
    }


    void action_auto(Object caller, dur timeout=0s,
        dur showdelay=-1s, dur fadedur=-1s)
    {
        action(caller, timeout, showdelay, fadedur, false);
    }


    void action(Object caller, dur timeout=0s,
        dur showdelay=-1s, dur fadedur=-1s, bool kbd=true)
    {
        timer.abort();

        // Force page show delay and transition duration in sane range.
        if (showdelay < 0s) showdelay = page_transition_delay;
        else showdelay = limit(showdelay, 0s, MAX_PAGE_TRANSITION_DELAY);
        if (fadedur < 0s) fadedur = PAGE_TRANSITION_DURATION;
        else fadedur = limit(fadedur, 0s, MAX_PAGE_TRANSITION_DURATION);

        // Clear page transition delay.
        page_transition_delay = 0s;

        // Clear first trial delay.
        first_trial_delay = 0s;

        if (!test_window1.show_page(this, now() + showdelay, fadedur))
        {
            // Page not yet shown. Extend timeout period (if applicable)
            // until page is fully visible (fade-in has finished).
            if (timeout > 0s)
                timeout += expected_transition_finish_time - now();
        }

        if (caller != null)
        {
            checkkeys = kbd && !test_window1.is_output_only();
            if (timeout > 0s) timer.start(now() + timeout);

            target = caller;
            control.target = this;
            control.disable_keys();
            control.disable_buttons();
	    control.enable_button(1, CONTINUE);
            control.enable_key(KEY_Return, CONTINUE);
            control.enable_key(' ', CONTINUE);
//            control.enable_key(KEY_Escape, CONTINUE);

            if (checkkeys) {
                println("A");
                test_window1.activate();
            }
            else if (test_window1.is_output_only()) {
                println("B");
                ctrl_window.activate();
            }
        }
        else
        {
            checkkeys = false;
            target = null;
        }
    }


    void stop_action()
    {
        timer.abort();

        checkkeys = false;

        target = null;

        if (control.target == this)
        {
            control.disable_keys();
            control.target = null;
        }
    }
}
